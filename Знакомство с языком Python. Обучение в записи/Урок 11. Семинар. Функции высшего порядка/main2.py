
#                                                               Задача №2.

# Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. Круговые орбиты не учитывайте: вы знаете, что у вашей
# звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты. Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой
# далекой планеты. Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей
# эллипса. При решении задачи используйте списочные выражения.

# Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь. Гарантируется, что самая
# далекая планета ровно одна

# Пример ввода и вывода данных представлены на следующем слайде

# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)] # Есть список кортежей в которой ноходяться размеры нашей полу оси
# print(*find_farthest_orbit(orbits)) # Выводим результат работы нашей функции
# Вывод:
# 2.5 10 

from math import pi # Импортируем число (пи)

def find_farthest_orbit(list_of_orbits):  # Сооздаем функцию
    # Сооздаем новый список. Это будит тот список где будим хранить только наши элепсы. Будим исключать круговые орбиты
    list1 = [i for i in list_of_orbits if i[0] != i[1]]  # # Сооздаем новый список (list1) в который будим записывать значеня [i for i in list_of_orbits наш список но будим
                                                         # записывать только в том случае если (if) i[0] у нас не будет равняться (!=) i[1] ]
    
    # Сооздаем список (list_s) где будим считать площяди каждого объекта.
    list_s = [(pi * i[0] * i[1]) for i in list1] # Мы число (pi) умножаем на i[0] и на i[1] и пройдем по всему массиву (for i in list1). Тоесть в нашем списки list_s мы будим
                                                 # считать плошядь каждого элемента

    # Будим искать максимальную площядь наших элепсов
    max_s = list_s.index(max(list_s)) # Сооздадим переменую (max_s) в которой будим возвращять индекс из нашего списка площядей (list_s) и будим это делать при помоши функции
                                      # (.index (мы передаем максимум (max среди списков(list_s))))
    return list1[max_s]  # Возврощяем (return) из списка (list1) [берем элемент с индексом (max_s)] 
    

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)] # Сооздаем список кортежей где находиться размер нашей полу оси
print(find_farthest_orbit(orbits)) # И будим ввызывать нашу фуннкцию

 # Здездочка это распоковка нашего кортежа (Тоесть ввывод будет не через кобочки, а просто два числа).