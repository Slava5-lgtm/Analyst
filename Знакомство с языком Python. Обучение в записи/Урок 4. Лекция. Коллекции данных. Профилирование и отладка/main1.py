#                                                    Списки

# Список - это упорядоченный конечный набор элементов. Давайте разбираться, по сути список - это тот же самый массив, в котором можно хранить элементы любых типов данных.
# Как работать со списками?

list_1 = [] # Создание пустого списка
list_2 = list() # Создание пустого списка
list_3 = [7, 9, 11, 13, 15, 17]

# В списках существует нумерация, которая начинается с 0, чтобы вывести первый элемент списка воспользуемся следующей конструкцией:

# print(list_1) 
# print(list_2)
# print(list_3) # [7, 9, 11, 13, 15, 17]
# print(*list_3) # * ставим чтобы небыло скобрк 7 9 11 13 15 17 

# Можно список заполнять не только при его создание, но и во время работы программы:

# list_1 = list() # создание пустого списка
# for i in range(5): # цикл выполнится 5 раз
#     n = int(input()) # пользователь вводит целое число
#     list_1.append(n) # сохранение элемента в конец списка
# 1-я итерация цикла(повторение 1): n = 12, list_1 = [12]
# 2-я итерация цикла(повторение 2): n = 7, list_1 = [12, 7]
# 3-я итерация цикла(повторение 3): n = -1, list_1 = [12, 7, -1]
# 4-я итерация цикла(повторение 4): n = 21, list_1 = [12, 7, -1, 21]
# 5-я итерация цикла(повторение 5): n = 0, list_1 = [12, 7, -1, 21, 0]
# print(list_1) # [12, 7, -1, 21, 0]

# Чтобы узнать количество элементов в списке необходимо использовать функцию len(имя_списка):

# list_1 = [7, 9, 11, 13, 15, 17]
# print(len(list_1)) # 6

# Мы обговорили с Вами создание списка и поняли, что мы можем пользоваться нумерацией, для того чтобы узнать какой элемент стоит на той или иной позиции. Но это не всегда
# удобно, особенно, когда список будет состоять из 1000, 1000000… элементов. В этом случае необходимо использовать цикл for.

# Взаимодействие цикла for со списком:
# list_1 = [12, 7, -1, 21, 0]
# for i in list_1:
#     print(i) # вывод каждого элемента списка
# 1-я итерация цикла(повторение 1): i = 12
# 2-я итерация цикла(повторение 2): i = 7
# 3-я итерация цикла(повторение 3): i = -1
# 4-я итерация цикла(повторение 4): i = 21
# 5-я итерация цикла(повторение 5): i = 0


# Не забываем, что у списка есть нумерация:

# list_1 = [12, 7, -1, 21, 0]
# for i in range(len(list_1)):
#     print(list_1[i]) # вывод каждого элемента списка
# 1-я итерация цикла(повторение 1): list_1[0] = 12
# 2-я итерация цикла(повторение 2): list_1[1] = 7
# 3-я итерация цикла(повторение 3): list_1[2] = -1
# 4-я итерация цикла(повторение 4): list_1[3] = 21
# 5-я итерация цикла(повторение 5): list_1[4] = 0


# сновные действия со списками:

# 1. Удаление последнего элемента списка.

# Метод pop удаляет последний элемент из списка:

# list_1 = [12, 7, -1, 21, 0]
# print(list_1)
# print(list_1.pop()) # 0
# print(list_1) # [12, 7, -1, 21]
# print(list_1.pop()) # 21
# print(list_1) # [12, 7, -1]
# print(list_1.pop()) # -1
# print(list_1) # [12, 7]

# 2. Удаление конкретного элемента из списка. Надо указать значение индекса в качестве аргумента функции pop:
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop(0)) # 12
# print(list_1) # [7, -1, 21, 0]

# 3. Добавление элемента в конец списка

# Функция append добавление элемента в конец списка
 
# list_1 = [1, 5]
# print(list_1)
# list_1.append(8) 
# print(list_1)

# 4. Добавление элемента на нужную позицию.

# Функция insert — указание индекса (позиции) и значения.
#list_1 = [12, 7, -1, 21, 0]
#print(list_1)
#print(list_1.insert(2, 11))
#print(list_1) # [12, 7, 11, -1, 21, 0]

list_1 = [] # Создаем пустой список
print(list_1)
for i in range(5): # При каждой итерации нашего цикла
    list_1.append(i) # Мы будим добовлять наше значения i (переменая i будит принемать значения от 0 до 4)
    print(list_1)
