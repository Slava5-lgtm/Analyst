# Некоторые функции могут понадобиться всего раз за всю работу приложения. Как можно обойтись без их явного описания? Как сократить подобный код?

# def f(x):
#     return x ** 2 # Квадрат тисла
# print(f(5))

# Функция в примере занимает всего две строчки кода, но в дальнейшем размеры описания функций будут увеличиваться. И тогда сокращение кода будет актуальным.
# Какой тип данных у функции? → <class “function”>

# У функции есть тип, значит мы можем создать переменную типа функции и положить в эту переменную какую-то другую функцию
# Теперь в контексте этого приложения a может использоваться точно так же, как и f. a — это переменная, которая хранит в себе ссылку на функцию.

# def f(x):
#     return x ** 2 # Квадрат тисла
# a = f
# print(f(5))
# print(a(6))

# Зачем это может потребоваться?

# Есть некая функция calc, которая принимает в качестве аргумента число, а в качестве результата возвращает это число + 10:

# def calc1(x):
#     return x + 10
# print(calc1(10)) # 20

# Если мы добавим в код не только сложение, но и умножение, деление и вычитание, внутри одного кода будем плодить одинаковую логику. Достаточно взять функцию calc, которая будет в
# качестве аргумента принимать операцию и что-то выдавать.

# def calk1(a): # Создали фунцию
#     return a + a

# def calk2(a): # Создали другую фунцию
#     return a * a

# def math(op, x): # Создали третию фунцию в которую передаеться два аргумента (op) и наша переменая (х)
#    print(op(x)) # Передаем  функцию math передаем какуюто фунцию (op), и вызываем нашу функцию и с какимто оператором (х)

    # Как это будет выглидить

# math(calk1, 5) # Вызываем фунцию math первый аргумент передаем ей какуюто фунцию например (calc1) вторым аргументом передаем значения 5. Вывод 10
# math(calk2, 5) # Вызываем фунцию math первый аргумент передаем ей какуюто фунцию например (calc2) вторым аргументом передаем значения 5. Вывод 25

# Передаем в фунцию math функцию calk2 соотвествено наша переменая (op) имеет ссылку на функцию calk2 и заием мы ее просто вызываем (print(op(x))) и выводим на экран

# Также можно передовать и два параметра

# def calk1(a, b): # Создали фунцию c двумя параметроми ((a) и (b))
#     return a + b

# def calk2(a, b): # Создали другую фунцию c двумя параметроми ((a) и (b))
#    return a * b

# def math(op, x, y): # Создали третию фунцию в которую передаеться два аргумента (op) и две переменые ((х) и (y))
#     print(op(x, y)) # Передаем  функцию math передаем какуюто фунцию (op), и вызываем нашу функцию и с какимто оператором (х)

# math(calk1, 5, 45) # Вызываем фунцию math первый аргумент передаем ей какуюто фунцию например (calc1) вторым аргументом передаем значения 5, третим аргументом 45. Вывод 50
# math(calk2, 5, 45) # Вызываем фунцию math первый аргумент передаем ей какуюто фунцию например (calc2) вторым аргументом передаем значения 5, третим аргументом 45. Вывод 225

# Python это скриптовый язык с помощи которого можем сокращять код. Самый простой пример это генератор списков. Здесь самые простые фунции мы также можем сокращять.
 
# В Python есть механизм, который позволяет превратить подобный вызов во что-то более красивое — lambda.

def calk1(a, b): # Создали фунцию c двумя параметроми ((a) и (b))
     return a + b

def math(op, x, y): # Создали третию фунцию в которую передаеться два аргумента (op) и две переменые ((х) и (y))
     print(op(x, y))
# calk1 = lambda a,b: a + b # calk1 это у нас (=) lambda фунция и буду передовать да значения (a, b). Через двоеточее (:) указываем что будим делать в программе. Возвращяем сумму этих
                          # чисел (a + b)
# math(calk1, 5, 45) # Вызываем фунцию math первый аргумент передаем ей какуюто фунцию например (calc1) вторым аргументом передаем значения 5, третим аргументом 45. Вывод 50

# Вот эту фунцию def calk1(a, b): 
#                   return a + b

# Преоброзовали вот в эту calk1 = lambda a,b: a + b

# Можно еше сократить вот так: 

math(lambda a,b: a + b, 5, 45) #  Вывод 50

#                                                            Итак:

# 1. Сначала мы избавились от классического описания функций.
# 2. Затем научились описывать лямбды, присваивая результат какой-то переменной.
# 3. После избавились от этой переменной, пробрасывая всю лямбду в качестве функции.
