#                                                               Задача 3.

#                                                                       Двумерный список

# Часто в программировании приходится писать код исходя из результата,который требует заказчик. В этот раз ему нужно получить двумерный список:
# [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

# Напишите программу, которая генерирует такой список и выводит его на экран. Используйте только list comprehensions.

#                                                                       Подсказка № 1
# Используйте генераторы списков (list comprehensions) для создания двумерных списков.

#                                                                       Подсказка № 2

# Внутри генератора списка используйте функцию range() с нужными параметрами. В данном случае range(1, 5) задает первый элемент каждой строки, а шаг в 4 единицы позволяет получить
# последующие элементы строки.

#                                                                       Подсказка № 3

# Для формирования каждого вложенного списка используйте выражение вида [начальное_значение, начальное_значение + 4, начальное_значение + 8]. Это позволяет получать элементы, которые
# находятся в фиксированном шаге друг от друга.

#                                                                       Эталонное решение:

# Создание двумерного списка с помощью list comprehension
# Внешний цикл по range(1, 5) определяет первый элемент каждой вложенной строки
# Внутренний цикл формирует элементы каждой строки с шагом 4

my_list = [[j_num for j_num in range(i_list, 13, 4)] for i_list in range(1, 5)]
print(my_list)
# Альтернативный вариант решения с использованием фиксированных смещений
second_answer = [[value, value + 4, value + 8] for value in range(1, 5)]
print(second_answer)